@page "/contact"
@using Models_Company;
@using WEB_Company.Services.Contracts;
@inject IContactServices Icontact
@inject ICompanyServices ICompany
@inject NavigationManager nmanajer

<div class="container-fluid ">
    <h3>Контакты !</h3>
    <div class="mb-2">
        <div class="flex-column justify-content-between mb-2 d-flex flex-md-row gap-md-2">
            <NavLink href="/contact/addnew" class="text-decoration-none btn btn-primary">
                <span class="oi oi-plus"></span>
                добавить новый
            </NavLink>
            <div class="d-flex gap-2">
                <input class="input-group-text" @bind=SearchText />
                <a @onclick=GetBySearch class="btn btn-outline-primary">
                    <span class="oi oi-map text-center"> Поиск</span>
                </a>
            </div>
        </div>
    </div>
    <div class="overflow-auto">
        @if (GetList is null)
        {
            <h1>Loading.....</h1>
        }
        else
        {
            <table class="table-bordered table table-light">
                <thead>
                    <tr>
                        <th>ФИО</th>
                        <th>КомпанияID</th>
                        <th>ЛПР</th>
                        <th>Должность</th>
                        <th>Дата создания</th>
                        <th>Дата изменения</th>
                        <th>Изменить</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                       // var NewData = (from contact in GetList   join company in GetCompanyList on contact.CompanyId equals company.Id select (contact, company));
                    }
                    @foreach (var item in GetList)
                    {
                        <tr>
                            <td>@item.FullName</td>
                            <td>@item.CompanyId</td>
                            <td><input type="checkbox" id="@item.Id" checked="@item.IsDecisionMaker" disabled /></td>
                            <td>@item.JobTitle</td>
                            <td>@item.CreationTime.ToShortDateString()</td>
                            <td>@item.ModificationTime.ToShortDateString()</td>
                            <td align="center">
                                <div class="d-flex justify-content-center">
                                    <a href="contact/edit/@item.Id" class="nav-link">
                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                    </a>
                                    <a href="" class="nav-link " @onclick=@(async()=>await OnDeleted(item.Id))>
                                        <span class="oi oi-trash" aria-hidden="true"></span>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    public IEnumerable<Contact> GetList { get; set; } = default!;

    public string SearchText { get; set; } = string.Empty;

    private IEnumerable<Contact> ForSearch { get; set; } = default!;
    private IEnumerable<MCompany> GetCompanyList { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        GetList = await Icontact.Getlist();
        ForSearch = GetList;

        GetCompanyList = await ICompany.Getlist();
    }
    protected async Task OnDeleted(Guid id)
    {
        var result = await Icontact.DeleteById(id);
        if (result)
        {
            nmanajer.NavigateTo("contact");
        }
    }

    public void GetBySearch() => GetList = GetBysearch(SearchText);

    public IEnumerable<Contact> GetBysearch(string search) => ForSearch.Where(s => s.Name.Contains(search)).ToList();

}
